#!/bin/csh
echo "Begin running dc!"
source /tmpdata/ranwu_staff_3/zWX1313644/GenData/USBC/SourceMe
source /tmpdata/ranwu_staff_3/enno_script/config.sh
set run_path="$1"
set verilogPath="$2"
set topName="$3"
set sdcPath="$4"
set ecdc_const_log="$5"
set ecdc_log="$6"
set GenName="$7"
set lastTopName="$8"
set gePath="/tmpdata/ranwu_staff_3/enno_script/General"
set passSavePath="/tmpdata/ranwu_staff_3/CDC_COMMON/GenData/Const_Pass"

rm -rf ${run_path}/dc_output	
mkdir ${run_path}/dc_output
cd ${run_path}/dc_output

source /software/hicad/cshrc/cshrc.modules
ma synthesis/2018.06sp5
setenv LD_LIBRAY_PATH /software/synopsys/synthesis/2018.06sp5/syn/O-2018.06-SP5/bin/

yes | cp  -ri ${gePath}/dcFiles/dc_flow.tcl ${run_path}
yes | cp  -ri ${gePath}/dcFiles/dc_flow_2nd.tcl ${run_path}
yes	| cp  -ri ${gePath}/dcFiles/dc_flow_3rd.tcl ${run_path}
yes | cp  -ri ${sdcPath} ${run_path}/dc_output

sed -i '/^source/d' ${ecdc_const_log}
sed -i '/^exit/d' ${ecdc_const_log}
sed -i 's/^'"${topName}"'\///g' ${ecdc_const_log}
sed -i 's/]_reg$/]/g' ${ecdc_const_log}
sed -i 's/:[0-9]\+]$/]/g' ${ecdc_const_log}
sed -i 's/\(.*\)\(\[[0-9]\+\]\[[0-9]\+\]$\)/\1_reg\2/g' ${ecdc_const_log}	
sed -i 's/\(.*[0-9a-zA-Z]\)\(\[[0-9]\+\]$\)/\1_reg\2/g' ${ecdc_const_log}

set sdcPath="${run_path}/dc_output/`basename ${sdcPath}`"
grep -i "set_case_analysis" ${sdcPath}>! ${run_path}/dc_output/DC_${topName}.sdc
sed -i 's/-objects//g' ${run_path}/dc_output/DC_${topName}.sdc	
sed -i 's/'"${topName}"'\///g' ${run_path}/dc_output/DC_${topName}.sdc

sed -i "s,#TopName,${topName}," ${run_path}/dc_flow.tcl	
sed -i "s,#TopName,${topName}," ${run_path}/dc_flow_2nd.tcl	
sed -i "s,#TopName,${topName}," ${run_path}/dc_flow_3rd.tcl
sed -i "s,#run_path,${run_path}/dc_output," ${run_path}/dc_flow_2nd.tcl	
sed -i "s,#run_path,${run_path}," ${run_path}/dc_flow_3rd.tcl
sed -i "s,#Design_flist,${verilogPath},g" ${run_path}/dc_flow.tcl	
sed -i "s,#DC_sdc,${run_path}/dc_output/DC_${topName}.sdc," ${run_path}/dc_flow.tcl	
sed -i "s,#Current_exec_path,${run_path}/dc_output," ${run_path}/dc_flow.tcl	
dc_shell -f ${run_path}/dc_flow.tcl -output_log_file ${run_path}/dc_output/dc.log

echo "========================================================="
echo "rm -rf ${run_path}/dc_output/{*.pvl,*.mr,*.syn,*.pvk}"
echo "grep -i will be removed. ${run_path}/dc_output/dc.log >! ${run_path}/dc_output/DC_const.log"
rm -rf ${run_path}/dc_output/{*.pvl,*.mr,*.syn,*.pvk}

grep -i "will be removed." ${run_path}/dc_output/dc.log >! ${run_path}/dc_output/DC_const.log
sed -i "s/^Information: The register '\(.*\)'.* will be removed.*/\1/g" ${run_path}/dc_output/DC_const.log	
#awk 'NR==FNR {lines[$0]=1;next} {if ($0 in lines) print > "PASS.tcl"; else print > "FALL.tcl"}' ${run_path}/dc_output/DC_const.log ${ecdc_const_log}
echo "---------------------------------------------------Yi Hang Change----------------------------------------------------------------------"
awk 'NR==FNR {lines[$1]=1;next} {if ($1 in lines) print > "PASS.tcl"; else print > "FALL.tcl"}'${run_path}/dc_output/DC_const.log ${ecdc_const_log}
echo "---------------------------------------------------Yi Hang Change----------------------------------------------------------------------"
sed -i 's/^/get_cells  /g' FALL.tcl
echo "========================"

ma synthesis/2018.06sp5
dc_shell -f ${run_path}/dc_flow_2nd.tcl -output_log_file ${run_path}/dc_output/dc_2nd.log

set a=`grep "Warning: Can't find object '" ${run_path}/dc_output/cell.log | wc -l`
#if ($a > 0) then	
	grep "Warning: Can't find object '" ${run_path}/dc_output/cell.log >! ${run_path}/dc_output/no_found.tcl
	sed -i "s/'//g" ${run_path}/dc_output/no_found.tcl
	sed -i 's/Warning: Cant find object/get cells /g' ${run_path}/dc_output/no_found.tcl	
	sed -i 's/in design.*(UID-95)$//g'${run_path}/dc_output/no_found.tcl
#endif

set b=`grep "{" ${run_path}/dc_output/cell_none.log | wc -l`
#if ($b > 0) then
	grep '{' ${run_path}/dc_output/cell_none.log >! ${run_path}/dc_output/no_opt.tcl
	sed -i 's/^{/get_attribute \[get_pins  /g' ${run_path}/dc_output/no_opt.tcl
	sed -i 's/}$/\/D\] constant_value/g' ${run_path}/dc_output/no_opt.tcl
#endif

if ( ${a} > 0 | ${b} > 0 ) then
	cd ${run_path}/dc_output
	ma synthesis/2018.06sp5
	dc_shell -f ${run_path}/dc_flow_3rd.tcl -output_log_file ${run_path}/dc_output/dc_3rd.log
	grep "Warning: Can't find object '" ${run_path}/dc_output/no_found.log >! ${run_path}/dc_output/no_found_debug.log	
	grep "Warning: Attribute 'constant_value' does not exist" ${run_path}/dc_output/no_opt.log >! ${run_path}/dc_output/no_opt_debug.log	
	sed -i "s/'//g" ${run_path}/dc_output/no_found_debug.log
	sed -i 's/Warning: Cant find object //g' ${run_path}/dc_output/no_found_debug.log	
	sed -i 's/in design.*(UID-95)$//g'${run_path}/dc_output/no_found_debug. log
	sed -i "s/'//g" ${run_path}/dc_output/no_opt_debug.log
	sed -i 's/Warning: Attribute constant_value does not exist on pin //g' ${run_path}/dc_output/no_opt_debug.log	
	sed -i 's/\/D. (UID-101)$//g' ${run_path}/dc_output/no_opt_debug.log
endif

##PV #####
#sed -i 's/^/'"${topName}"'\//g' ${run_path}/dc_output/PASS.tcl
sed -i 's/_reg$//g' ${run_path}/dc_output/PASS.tcl
sed -i 's/_reg\[/\[/g' ${run_path}/dc_output/PASS.tcl
####SUMMARY DATA###############
echo "------------------------------------------------------------------------------------------"
set a=`wc -l ${run_path}/dc_output/PASS.tcl`
set b=`wc -l ${run_path}/dc_output/no_found_debug. log`
set c=`wc -l ${run_path}/dc_output/no_opt_debug.log`
set d=`wc -l ${ecdc_const_log}`
echo "constant pass num is $a" >! ${run_path}/dc_output/summary_rpt.log
echo "constant no_found num is $b" >>${run_path}/dc_output/summary_rpt.log
echo "constant no opt num is $c" >> ${run_path}/dc_output/summary_rpt.log
echo "constant all constant num is $d" >> ${run_path}/dc_output/summary_rpt.log	
grep "Total number of instances"${ecdc_log} >> ${run_path}/dc_output/summary_rpt.log
grep "^start_time" ${run_path}/dc_output/dc.log >> ${run_path}/dc_output/summary_rpt.log	
grep "^end_time" ${run_path}/dc_output/dc. log >> ${run_path}/dc_output/summary_rpt.log
echo "------------------------------------------------------------------------------------------"

set moduleNames=(Hi18XXE Hi1813 LIGHTV300 USBC)
set genSwitch="0"
foreach moduleName (${moduleNames})
	if ( "${GenName}" =~ *"${moduleName}"* )then
		set genSwitch="1"
		if ( "${GenName}" =~ *"_split"* )then
			set topName=`dirname ${run_path}`
			set topName=`basename ${run_path}`
		endif
	endif
end
if ( ${genSwitch} == "1" )then	
	if ( ! -d "${passSavePath}/${GenName}" )then
		mkdir ${passSavePath}/${GenName}
		chmod +775 ${passSavePath}/${GenName}
	endif
	echo "lastTopName: ${lastTopName}"
	echo "TopName: ${topName}"
	if ( ${lastTopName} == "0" )then
		if ( ! -d "${passSavePath}/${GenName}/${topName}" )then
			mkdir ${passSavePath}/${GenName}/${topName}	
			chmod +775 ${passSavePath}/${GenName}/${topName}
		endif
		yes | cp ${run_path}/dc_output/PASS. tcl ${passSavePath}/${GenName}/${topName}/${GenName}-${topName}-PASS.tcl
		chmod +775 ${passSavePath}/${GenName}/${topName}/${GenName}-${topName}-PASS.tcl
	else
		if ( ! -d "${passSavePath}/${GenName}/${lastTopName}" )then
			mkdir ${passSavePath}/${GenName}/${lastTopName}
			chmod +775 ${passSavePath}/${GenName}/${lastTopName}
		endif
		if ( ! -d "${passSavePath}/${GenName}/${lastTopName}/${topName}" )then
			mkdir ${passSavePath}/${GenName}/${lastTopName}/${topName}
			chmod +775 ${passSavePath}/${GenName}/${lastTopName}/${topName}
		endif
		yes | cp ${run_path}/dc_output/PASS.tcl ${passSavePath}/${GenName}/${lastTopName}/${topName}/${GenName}-${lastTopName}-${topName}-PASS.tcl
		chmod +775 ${passSavePath}/${GenName}/${lastTopName}/${topName}/${GenName}-${lastTopName}-${topName}-PASS.tcl
	endif
endif

+++++++dcFiles/dc_flow.tcl+++++++
echo "start_time is:[clock format [clock seconds] -format "%Y-%m-%d %H:%M:%S"]"
set_host_option -max 8
set design #TopName
set curExePath #Current_exec_path
set_app_var compile_enable_register_merging false
set compile_delete_unloaded_sequential_cells {true}
set compile_seqmap_propagate_constants {true}
set target_library "/foundry/kuorong/HiPDSLib/RE-K_LIBRARY/tsmc/N7/STDCELL/REK_V1.2/tcbn07_bwph240l11p57pd_base_svt_130b_h/timing_power_noise/CCS/tcbn07_bwph240l11p57pd_base_svt_130a/tcbn07_bwph240l11p57pd_base_svtssgnp_0p675v_m40c_cworst_CCworst_T_ccs.db"
set link_library $target_library
set HIUSBC3XV100_DESIGN_ROOT "/tmpdata/ranwu_staff_3/benchmark/hiusb3xv100/rtl/hdl"
set designFile #Design_flist
if {[regexp {\.f} ${designFile}]} {
    analyze -format sverilog -vcs "-f ${designFile}"
} else {
    analyze -format sverilog -vcs "${designFile}"
}

elaborate $design

source -echo -verbose "#DC_sdc"
write_file -format ddc -hierarchy -output ${curExePath}/${design}_link.ddc

compile -map_effort low

write_file -format ddc -hierarchy -output ${curExePath}/${design}_low.ddc
compile -map_effort medium -ungroup_all -incremental_mapping
write_file -format ddc -hierarchy -output ${curExePath}/${design}_medium.ddc
compile -map_effort high -ungroup_all -incremental_mapping
write_file -format ddc -hierarchy -output ${curExePath}/${design}_high.ddc
compile -map_effort high -ungroup_all -incremental_mapping -area_effort high -boundary_optimization
write_file -format ddc -hierarchy -output ${curExePath}/${design}_high_opt.ddc
compile_ultra -incremental

write_file -format ddc -hierarchy -output ${curExePath}/${design}_ultra.ddc
check_design -designs > ${design}_bbox.log

echo "end_time is:[clock format [clock seconds] -format "%Y-%m-%d %H:%M:%S"]"
exit
+++++++++dcFiles/dc_flow_2nd.tcl+++++++++++++++++++++++++++++++++++++++++++
set run_path #run_path
set topName #TopName
read_ddc ${run_path}/${topName}_low.ddc
source -echo -verbose "${run_path}/FALL.tcl" > ${run_path}/cell.log
read_ddc ${run_path}/${topName}_ultra.ddc
source -echo -verbose "${run_path}/FALL.tcl" > ${run_path}/cell_none.log
exit
+++++++++++dc_flow_3rd.tcl++++++++++++++
set run_path #run_path
set topName #TopName
read_ddc ${run_path}/dc_output/${topName}_link.ddc
source -echo -verbose ${run_path}/dc_output/no_found.tcl > ${run_path}/dc_output/no_found.log
read_ddc ${run_path}/dc_output/${topName}_ultra.ddc
source -echo -verbose ${run_path}/dc_output/no_opt.tcl > ${run_path}/dc_output/no_opt.log
exit

+++++++++cdc_const_DC.tcl++++++++++
set allMsg [get_messages -message_id SetupDataTiedToConst]
foreach msg $allMsg {
	set constValue [get_attributes $msg -attribute Instance1 -attribute String3]
	if [llength $constValue] == 2 } {
		puts "[lindex $constValue 0]_reg"
	} else {
		set constValue [get_attributes $msg -attribute InstanceList1 -attribute String3]
		if [llength $constValue] == 2 } {
			puts "[lindex $constValue 0]_reg"
		}
	}
}



+++++++runLEC+++++++++
#!/bin/csh
echo "Begin running lec!"
source /tmpdata/ranwu_staff_3/enno_script/config.sh(定义下面的color含义）
set run_path="$1"
set verilogPath="$2"
set topName="$3"
set configSwitch="$4"
set gePath="/tmpdata/ranwu_staff_3/enno_script/General"
rm -rf ${run_path}/lec_output
mkdir ${run_path}/lec_output
cd ${run_path}/lec_output

source /software/hicad/cshrc/cshrc.modules
ma synthesis/2019.03
ma formality/2019.03
setenv LD_LIBRAY_PATH /software/synopsys/formality/2019.03/bin

yes | cp -ri ${gePath}/formalFiles/fm_flow.tcl ${run_path}
mkdir ${run_path}/lec_output/rpt
mkdir ${run_path}/lec_output/fss

sed -i "s,#TopName,${topName}," ${run_path}/fm_flow.tcl
sed -i "s,#RptDir,${run_path}/lec_output/rpt," ${run_path}/fm_flow.tcl
sed -i "s,#FssDir,${run_path}/lec_output/fss," ${run_path}/fm_flow.tcl

sed -i "s,#SDCTclPath,${run_path}/enno_output/${topName}_sdcConst.tcl," ${run_path}/fm_flow.tcl
sed -i "s,#ConstTclPath,${run_path}/enno_output/${topName}_const.tcl," ${run_path}/fm_flow.tcl
sed -i '/^source/d' ${run_path}/enno_output/${topName}_sdcConst.tcl
sed -i '/^exit/d' ${run_path}/enno_output/${topName}_sdcConst.tcl
sed -i '/^source/d' ${run_path}/enno_output/${topName}_const.tcl
sed -i '/^exit/d' ${run_path}/enno_output/${topName}_const.tcl
sed -i 's/]_reg\/Q$/]\/Q/g' ${run_path}/enno_output/${topName}_const.tcl
sed -i 's/:[0-9]\+]\/Q$/]\/Q/g' ${run_path}/enno_output/${topName}_const.tcl
sed -i 's/\(.*\)\(\[[0-9]\+\]\[[0-9]\+\]\/Q$\)/\1_reg\2/g' ${run_path}/enno_output/${topName}_const.tcl
sed -i 's/\(.*[0-9a-zA-Z]\)\(\[[0-9]\+\]\/Q$\)/\1_reg\2/g' ${run_path}/enno_output/${topName}_const.tcl

if (`echo ${verilogPath} | awk -F. '{print $NF}'` == "f") then
    sed -i "s,#RtlPath,${verilogPath},g" ${run_path}/fm_flow.tcl
else
    echo "${verilogPath}" > ${run_path}/lec_output/${topName}.f
    sed -i "s,#RtlPath,${run_path}/lec_output/${topName}.f,g" ${run_path}/fm_flow.tcl
endif

if ( ${configSwitch} == "1" ) then
    if ( ! -e ${run_path}/lec_config.tcl ) then
        cp ${config_path}/lec_config.tcl ${run_path}/
	endif
	set lec_location_keywords="set verification_set_undriven_signals"
	set lec_config_line=`grep -n "${lec_location_keywords}" ${run_path}/fm_flow.tcl | cut -d ":" -f 1`
	sed -i "${lec_config_line}a\source ${run_path}/lec_config.tcl" ${run_path}/fm_flow.tcl
	echo "Lec config path: ${run_path}/lec_config.tcl"
	echo -n "Do you want to change the lec config? (Y/N):"
	set lec_cvalue = "$<"
	if ( ${lec_cvalue} == "Y" || ${lec_cvalue} == "y" )then
		vim ${run_path}/lec_config.tcl
	endif
endif

fm_shell -FR Formality -overwrite -64bit -f ${run_path}/fm_flow.tcl | tee -i ${run_path}/lec_output/${topName}_fm.log
echo "${color_2}Enno Const Result:${color_0} ${color_1}${run_path}/enno_output/${topName}_const.tcl${color_0}"
echo "${color_2}LEC Log Result:${color_0} ${color_1}${run_path}/lec_output/${topName}_fm.log${color_0}"
echo "${color_2}Matched point:${color_0} ${color_1}${run_path}/lec_output/rpt/matched_points.rpt${color_0}"
echo "${color_2}Failed point:${color_0} ${color_1}${run_path}/lec_output/rpt/fail_points.rpt${color_0}"

mkdir ${run_path}/lec_output_1
mkdir ${run_path}/lec_output_1/rpt
mkdir ${run_path}/lec_output_1/fss
yes | cp ${run_path}/fm_flow.tcl ${run_path}/lec_output_1
sed -i "s,set_app_var verification_assume_reg_init Liberal0,set_app_var verification_assume_reg_init Liberal1," ${run_path}/lec_output_1/fm_flow.tcl
sed -i "s,lec_output,lec_output_1,g" ${run_path}/lec_output_1/fm_flow.tcl
grep -B 13 '(is not equivalent)' ${run_path}/lec_output/${topName}_fm.log | grep -i '^verify -constant' >! ${run_path}/lec_output_1/${topName}_const.tcl
sed -i "s,source -echo -verbose .*${topName}_const.tcl,source -echo -verbose ${run_path}/lec_output_1/${topName}_const.tcl," ${run_path}/lec_output_1/fm_flow.tcl
fm_shell -FR Formality -overwrite -64bit -f ${run_path}/lec_output_1/fm_flow.tcl | tee -i ${run_path}/lec_output_1/${topName}_fm.log

++++++++formalFiles/fm_flow.tcl++++++
set design #TopName
set SYNOPSYS_ROOT /software/synopsys/synthesis/2019.03sp1_1/syn/P-2019.03-SP1-1
set benchmark_name test
set RPT_DIR #RptDir
set FSS_DIR #FssDir
set max_cores 4
set verification_clock_gate_hold_mode low
redirect /dev/null {set start_time_in_second [sh date +%s]}
echo "+------------------------------------------------------+"
echo [format "| AT %s, Start: %-17s |" [date] $design]
echo [format "| Host: %-46s	|" [sh hostname]]
echo [format "| User: %-46s |" [sh whoami]]
echo "+------------------------------------------------------+"
set search path "/data/VIP/OJ_Project/libs"
set_host_options -max_cores $max_cores
remove_container -all
set SYNOPSYS_DW_PATH ${SYNOPSYS_ROOT}/libraries/syn
set_app_var hdlin_dwroot	"$SYNOPSYS_DW_PATH/../.."
set_app_var hdlin_synroot	"$SYNOPSYS_DW_PATH/../.."
set_app_var hdlin_ignore_full_case	false
set_app_var hdlin_ignore_parallel_case	false
set_app_var hdlin_unresolved_modules	black_box
set_app_var hdlin_vhdl_presto_naming	true
set_app_var verification_clock_gate_edge_analysis	true
set_app_var verification_verify_unread_compare_points	false
set_app_var verification_verify_matched_unread_compare_points false
set_app_var verification_verify_unread_bbox_inputs	false
set_app_var verification_verify_unread_tech_cell_pins	false
set_app_var hdlin_warn_on_mismatch_message "FMR_ELAB-146 FMR_ELAB-118 FMR_ELAB-145 FMR_ELAB-147 FMR_VLOG-079 FMR_ELAB-116 FMR_ELAB-115 FMR_VLOG-929 FMR_VLOG-091 FMR_ELAB-117 FMR_VLOG-928 FMR_ELAB-059"
set verification_failing_point_limit 0
set verification_allow_hardware_x_semantics r2g
set verification_set_undriven_signals x
set_app_var verification_assume_reg_init Liberal0

set synthetic_library	[list $SYNOPSYS_DW_PATH/dw_foundation.sldb]
set svf_file tc_netlist.svf
if {[file exists ${svf_file}]} {
	set_svf -append ${svf_file}
}
set rtl_file #RtlPath
set syn_file #RtlPath
if {[regexp {.f} $rtl_file]} {
	read_sverilog -container ref -libname LIB -12 -vcs "-f $rtl_file +libext+.v"
} else {
	read_sverilog -container ref -libname LIB -12 -vcs "$rtl_file +libext+.v"
}
set_top ref:/LIB/$design
set_reference_design ref:/LIB/$design


if {[regexp {.f} $syn_file]} {
	read_sverilog -container imp -vcs "-f $syn_file +libext+.v"
} else {
	read_sverilog -container imp -vcs "$syn_file +libext+.v"
}


set_top imp:/WORK/$design
set_implementation_design imp: /WORK/$design

source -echo -verbose #SDCTclPath
match
report_matched_points					> ${RPT_DIR}/matched_points.rpt
report_matched_points 	-method user 	> ${RPT_DIR}/user_matched_points.rpt
report_unmatched_points					> ${RPT_DIR}/unmatched_points.rpt
report_unmatched_points -datapath		> ${RPT_DIR}/unmatched_datapath. rpt
report_unmatched_points -status unread 	> ${RPT_DIR} /unread. rpt
report_black_boxes						> ${RPT_DIR}/bbox.rpt

source -echo -verbose #ConstTclPath
if {[verify]==1} {
	set succeeded 1
} else {
	set succeeded 0
}
report_failing_points			> ${RPT_DIR}/fail_points.rpt
report_unverified_points		> ${RPT_DIR}/unverified_points.rpt
report_aborted_points			> ${RPT_DIR}/aborted.rpt
report_undriven_nets			> ${RPT_DIR}/undriven.rpt
report_multidriven_nets			> ${RPT_DIR}/multidriven.rpt
report_not_compared_points		> ${RPT_DIR}/notcompared.rpt
report_loops					> ${RPT_DIR}/loops.rpt
report_dont_verify_points		> ${RPT_DIR}/dont_verify.rpt
report_constants				> ${RPT_DIR}/constants.rpt

save_session -replace	${FSS_DIR}/${benchmark_name}.fss
echo "----------------------------------"
echo " $design formality end "
echo "----------------------------------"
echo "current_time is:[date]"

redirect /dev/null {set end_time_in_second [sh date +%s] }
redirect /dev/null {set run_time_in_minute [expr [expr $end_time_in_second - $start_time_in_second]/ 60]}
redirect /dev/null {set run_time_hour [expr $run_time_in_minute / 60]}
redirect /dev/null {set run_time_minute [expr $run_time_in_minute % 60]}
redirect /dev/null {set run_time "$run_time_hour hour:$run_time_minute minute"}
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo [format "| AT %s, Finished: %-14s |" [date] $design]
echo [format "| Elapsed Time: %-46s |" $run_time]
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++"
if {$succeeded == 1} {
    echo "succeeded"
    # quit
} else {
    echo "fail"
    # quit
}
exit
++++++++formalFiles/sdc_const.tcl++++++
set file1 [open "#CaseAnalysisValue" r]
while {[gets $file1 line] >= 0} {
    if {[regexp {set_case_analysis 0 -objects \[get_ports (.*)\]} $line $file1 a]} {
        puts "set_constant -type port ref:/LIB/$a 0"
        puts "set_constant -type port imp:/WORK/$a 0"
    }
    if {[regexp {set_case_analysis 0 -objects \[get_pins (.*)\]} $line $file1 a]} {
        puts "set_constant -type pin ref:/LIB/$a 0"
        puts "set_constant -type pin imp:/WORK/$a 0"
    }
    if {[regexp {set_case_analysis 0 -objects \[get_nets (.*)\]} $line $file1 a]} {
        puts "set_constant -type net ref:/LIB/$a 0"
        puts "set_constant -type net imp:/WORK/$a 0"
    }
    if {[regexp {set_case_analysis 1 -objects \[get_ports (.*)\]} $line $file1 b]} {
        puts "set_constant -type port ref:/LIB/$b 1"
        puts "set_constant -type port imp:/WORK/$b 1"
    }
    if {[regexp {set_case_analysis 1 -objects \[get_pins (.*)\]} $line $file1 b]} {
        puts "set_constant -type pin ref:/LIB/$b 1"
        puts "set_constant -type pin imp:/WORK/$b 1"
    }
    if {[regexp {set_case_analysis 1 -objects \[get_nets (.*)\]} $line $file1 b]} {
        puts "set_constant -type net ref:/LIB/$b 1"
        puts "set_constant -type net imp:/WORK/$b 1"
    }
}
close $file1
