#!/bin/csh
echo "Begin running dc!"
source /tmpdata/ranwu_staff_3/zWX1313644/GenData/USBC/SourceMe
source /tmpdata/ranwu_staff_3/enno_script/config.sh
set run_path="$1"
set verilogPath="$2"
set topName="$3"
set sdcPath="$4"
set ecdc_const_log="$5"
set ecdc_log="$6"
set GenName="$7"
set lastTopName="$8"
set gePath="/tmpdata/ranwu_staff_3/enno_script/General"
set passSavePath="/tmpdata/ranwu_staff_3/CDC_COMMON/GenData/Const_Pass"

rm -rf ${run_path}/dc_output	
mkdir ${run_path}/dc_output
cd ${run_path}/dc_output

source /software/hicad/cshrc/cshrc.modules
ma synthesis/2018.06sp5
setenv LD_LIBRAY_PATH /software/synopsys/synthesis/2018.06sp5/syn/O-2018.06-SP5/bin/

yes | cp  -ri ${gePath}/dcFiles/dc_flow.tcl ${run_path}
yes | cp  -ri ${gePath}/dcFiles/dc_flow_2nd.tcl ${run_path}
yes	| cp  -ri ${gePath}/dcFiles/dc_flow_3rd.tcl ${run_path}
yes | cp  -ri ${sdcPath} ${run_path}/dc_output

sed -i '/^source/d' ${ecdc_const_log}
sed -i '/^exit/d' ${ecdc_const_log}
sed -i 's/^'"${topName}"'\///g' ${ecdc_const_log}
sed -i 's/]_reg$/]/g' ${ecdc_const_log}
sed -i 's/:[0-9]\+]$/]/g' ${ecdc_const_log}
sed -i 's/\(.*\)\(\[[0-9]\+\]\[[0-9]\+\]$\)/\1_reg\2/g' ${ecdc_const_log}	
sed -i 's/\(.*[0-9a-zA-Z]\)\(\[[0-9]\+\]$\)/\1_reg\2/g' ${ecdc_const_log}

set sdcPath="${run_path}/dc_output/`basename ${sdcPath}`"
grep -i "set_case_analysis" ${sdcPath}>! ${run_path}/dc_output/DC_${topName}.sdc
sed -i 's/-objects//g' ${run_path}/dc_output/DC_${topName}.sdc	
sed -i 's/'"${topName}"'\///g' ${run_path}/dc_output/DC_${topName}.sdc

sed -i "s,#TopName,${topName}," ${run_path}/dc_flow.tcl	
sed -i "s,#TopName,${topName}," ${run_path}/dc_flow_2nd.tcl	
sed -i "s,#TopName,${topName}," ${run_path}/dc_flow_3rd.tcl
sed -i "s,#run_path,${run_path}/dc_output," ${run_path}/dc_flow_2nd.tcl	
sed -i "s,#run_path,${run_path}," ${run_path}/dc_flow_3rd.tcl
sed -i "s,#Design_flist,${verilogPath},g" ${run_path}/dc_flow.tcl	
sed -i "s,#DC_sdc,${run_path}/dc_output/DC_${topName}.sdc," ${run_path}/dc_flow.tcl	
sed -i "s,#Current_exec_path,${run_path}/dc_output," ${run_path}/dc_flow.tcl	
dc_shell -f ${run_path}/dc_flow.tcl -output_log_file ${run_path}/dc_output/dc.log

echo "========================================================="
echo "rm -rf ${run_path}/dc_output/{*.pvl,*.mr,*.syn,*.pvk}"
echo "grep -i will be removed. ${run_path}/dc_output/dc.log >! ${run_path}/dc_output/DC_const.log"
rm -rf ${run_path}/dc_output/{*.pvl,*.mr,*.syn,*.pvk}

grep -i "will be removed." ${run_path}/dc_output/dc.log >! ${run_path}/dc_output/DC_const.log
sed -i "s/^Information: The register '\(.*\)'.* will be removed.*/\1/g" ${run_path}/dc_output/DC_const.log	
#awk 'NR==FNR {lines[$0]=1;next} {if ($0 in lines) print > "PASS.tcl"; else print > "FALL.tcl"}' ${run_path}/dc_output/DC_const.log ${ecdc_const_log}
echo "---------------------------------------------------Yi Hang Change----------------------------------------------------------------------"
awk 'NR==FNR {lines[$1]=1;next} {if ($1 in lines) print > "PASS.tcl"; else print > "FALL.tcl"}'${run_path}/dc_output/DC_const.log ${ecdc_const_log}
echo "---------------------------------------------------Yi Hang Change----------------------------------------------------------------------"
sed -i 's/^/get_cells  /g' FALL.tcl
echo "========================"

ma synthesis/2018.06sp5
dc_shell -f ${run_path}/dc_flow_2nd.tcl -output_log_file ${run_path}/dc_output/dc_2nd.log

set a=`grep "Warning: Can't find object '" ${run_path}/dc_output/cell.log | wc -l`
#if ($a > 0) then	
	grep "Warning: Can't find object '" ${run_path}/dc_output/cell.log >! ${run_path}/dc_output/no_found.tcl
	sed -i "s/'//g" ${run_path}/dc_output/no_found.tcl
	sed -i 's/Warning: Cant find object/get cells /g' ${run_path}/dc_output/no_found.tcl	
	sed -i 's/in design.*(UID-95)$//g'${run_path}/dc_output/no_found.tcl
#endif

set b=`grep "{" ${run_path}/dc_output/cell_none.log | wc -l`
#if ($b > 0) then
	grep '{' ${run_path}/dc_output/cell_none.log >! ${run_path}/dc_output/no_opt.tcl
	sed -i 's/^{/get_attribute \[get_pins  /g' ${run_path}/dc_output/no_opt.tcl
	sed -i 's/}$/\/D\] constant_value/g' ${run_path}/dc_output/no_opt.tcl
#endif

if ( ${a} > 0 | ${b} > 0 ) then
	cd ${run_path}/dc_output
	ma synthesis/2018.06sp5
	dc_shell -f ${run_path}/dc_flow_3rd.tcl -output_log_file ${run_path}/dc_output/dc_3rd.log
	grep "Warning: Can't find object '" ${run_path}/dc_output/no_found.log >! ${run_path}/dc_output/no_found_debug.log	
	grep "Warning: Attribute 'constant_value' does not exist" ${run_path}/dc_output/no_opt.log >! ${run_path}/dc_output/no_opt_debug.log	
	sed -i "s/'//g" ${run_path}/dc_output/no_found_debug.log
	sed -i 's/Warning: Cant find object //g' ${run_path}/dc_output/no_found_debug.log	
	sed -i 's/in design.*(UID-95)$//g'${run_path}/dc_output/no_found_debug. log
	sed -i "s/'//g" ${run_path}/dc_output/no_opt_debug.log
	sed -i 's/Warning: Attribute constant_value does not exist on pin //g' ${run_path}/dc_output/no_opt_debug.log	
	sed -i 's/\/D. (UID-101)$//g' ${run_path}/dc_output/no_opt_debug.log
endif

##PV #####
#sed -i 's/^/'"${topName}"'\//g' ${run_path}/dc_output/PASS.tcl
sed -i 's/_reg$//g' ${run_path}/dc_output/PASS.tcl
sed -i 's/_reg\[/\[/g' ${run_path}/dc_output/PASS.tcl
####SUMMARY DATA###############
echo "------------------------------------------------------------------------------------------"
set a=`wc -l ${run_path}/dc_output/PASS.tcl`
set b=`wc -l ${run_path}/dc_output/no_found_debug. log`
set c=`wc -l ${run_path}/dc_output/no_opt_debug.log`
set d=`wc -l ${ecdc_const_log}`
echo "constant pass num is $a" >! ${run_path}/dc_output/summary_rpt.log
echo "constant no_found num is $b" >>${run_path}/dc_output/summary_rpt.log
echo "constant no opt num is $c" >> ${run_path}/dc_output/summary_rpt.log
echo "constant all constant num is $d" >> ${run_path}/dc_output/summary_rpt.log	
grep "Total number of instances"${ecdc_log} >> ${run_path}/dc_output/summary_rpt.log
grep "^start_time" ${run_path}/dc_output/dc.log >> ${run_path}/dc_output/summary_rpt.log	
grep "^end_time" ${run_path}/dc_output/dc. log >> ${run_path}/dc_output/summary_rpt.log
echo "------------------------------------------------------------------------------------------"

set moduleNames=(Hi18XXE Hi1813 LIGHTV300 USBC)
set genSwitch="0"
foreach moduleName (${moduleNames})
	if ( "${GenName}" =~ *"${moduleName}"* )then
		set genSwitch="1"
		if ( "${GenName}" =~ *"_split"* )then
			set topName=`dirname ${run_path}`
			set topName=`basename ${run_path}`
		endif
	endif
end
if ( ${genSwitch} == "1" )then	
	if ( ! -d "${passSavePath}/${GenName}" )then
		mkdir ${passSavePath}/${GenName}
		chmod +775 ${passSavePath}/${GenName}
	endif
	echo "lastTopName: ${lastTopName}"
	echo "TopName: ${topName}"
	if ( ${lastTopName} == "0" )then
		if ( ! -d "${passSavePath}/${GenName}/${topName}" )then
			mkdir ${passSavePath}/${GenName}/${topName}	
			chmod +775 ${passSavePath}/${GenName}/${topName}
		endif
		yes | cp ${run_path}/dc_output/PASS. tcl ${passSavePath}/${GenName}/${topName}/${GenName}-${topName}-PASS.tcl
		chmod +775 ${passSavePath}/${GenName}/${topName}/${GenName}-${topName}-PASS.tcl
	else
		if ( ! -d "${passSavePath}/${GenName}/${lastTopName}" )then
			mkdir ${passSavePath}/${GenName}/${lastTopName}
			chmod +775 ${passSavePath}/${GenName}/${lastTopName}
		endif
		if ( ! -d "${passSavePath}/${GenName}/${lastTopName}/${topName}" )then
			mkdir ${passSavePath}/${GenName}/${lastTopName}/${topName}
			chmod +775 ${passSavePath}/${GenName}/${lastTopName}/${topName}
		endif
		yes | cp ${run_path}/dc_output/PASS.tcl ${passSavePath}/${GenName}/${lastTopName}/${topName}/${GenName}-${lastTopName}-${topName}-PASS.tcl
		chmod +775 ${passSavePath}/${GenName}/${lastTopName}/${topName}/${GenName}-${lastTopName}-${topName}-PASS.tcl
	endif
endif

+++++++dcFiles/dc_flow.tcl+++++++
echo "start_time is:[clock format [clock seconds] -format "%Y-%m-%d %H:%M:%S"]"
set_host_option -max 8
set design #TopName
set curExePath #Current_exec_path
set_app_var compile_enable_register_merging false
set compile_delete_unloaded_sequential_cells {true}
set compile_seqmap_propagate_constants {true}
set target_library "/foundry/kuorong/HiPDSLib/RE-K_LIBRARY/tsmc/N7/STDCELL/REK_V1.2/tcbn07_bwph240l11p57pd_base_svt_130b_h/timing_power_noise/CCS/tcbn07_bwph240l11p57pd_base_svt_130a/tcbn07_bwph240l11p57pd_base_svtssgnp_0p675v_m40c_cworst_CCworst_T_ccs.db"
set link_library $target_library
set HIUSBC3XV100_DESIGN_ROOT "/tmpdata/ranwu_staff_3/benchmark/hiusb3xv100/rtl/hdl"
set designFile #Design_flist
if {[regexp {\.f} ${designFile}]} {
    analyze -format sverilog -vcs "-f ${designFile}"
} else {
    analyze -format sverilog -vcs "${designFile}"
}

elaborate $design

source -echo -verbose "#DC_sdc"
write_file -format ddc -hierarchy -output ${curExePath}/${design}_link.ddc

compile -map_effort low

write_file -format ddc -hierarchy -output ${curExePath}/${design}_low.ddc
compile -map_effort medium -ungroup_all -incremental_mapping
write_file -format ddc -hierarchy -output ${curExePath}/${design}_medium.ddc
compile -map_effort high -ungroup_all -incremental_mapping
write_file -format ddc -hierarchy -output ${curExePath}/${design}_high.ddc
compile -map_effort high -ungroup_all -incremental_mapping -area_effort high -boundary_optimization
write_file -format ddc -hierarchy -output ${curExePath}/${design}_high_opt.ddc
compile_ultra -incremental

write_file -format ddc -hierarchy -output ${curExePath}/${design}_ultra.ddc
check_design -designs > ${design}_bbox.log

echo "end_time is:[clock format [clock seconds] -format "%Y-%m-%d %H:%M:%S"]"
exit
+++++++++dcFiles/dc_flow_2nd.tcl+++++++++++++++++++++++++++++++++++++++++++
set run_path #run_path
set topName #TopName
read_ddc ${run_path}/${topName}_low.ddc
source -echo -verbose "${run_path}/FALL.tcl" > ${run_path}/cell.log
read_ddc ${run_path}/${topName}_ultra.ddc
source -echo -verbose "${run_path}/FALL.tcl" > ${run_path}/cell_none.log
exit
+++++++++++dc_flow_3rd.tcl++++++++++++++
set run_path #run_path
set topName #TopName
read_ddc ${run_path}/dc_output/${topName}_link.ddc
source -echo -verbose ${run_path}/dc_output/no_found.tcl > ${run_path}/dc_output/no_found.log
read_ddc ${run_path}/dc_output/${topName}_ultra.ddc
source -echo -verbose ${run_path}/dc_output/no_opt.tcl > ${run_path}/dc_output/no_opt.log
exit

+++++++++cdc_const_DC.tcl++++++++++
set allMsg [get_messages -message_id SetupDataTiedToConst]
foreach msg $allMsg {
	set constValue [get_attributes $msg -attribute Instance1 -attribute String3]
	if [llength $constValue] == 2 } {
		puts "[lindex $constValue 0]_reg"
	} else {
		set constValue [get_attributes $msg -attribute InstanceList1 -attribute String3]
		if [llength $constValue] == 2 } {
			puts "[lindex $constValue 0]_reg"
		}
	}
}
